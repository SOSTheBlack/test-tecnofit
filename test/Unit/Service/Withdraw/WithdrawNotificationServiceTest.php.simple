<?php

declare(strict_types=1);

namespace HyperfTest\Unit\Service\Withdraw;

use App\Service\Withdraw\WithdrawNotificationService;
use App\DataTransfer\Account\Balance\WithdrawRequestData;
use App\DataTransfer\Account\Balance\PixData;
use App\Enum\WithdrawMethodEnum;
use App\Enum\PixKeyTypeEnum;
use PHPUnit\Framework\TestCase;
use Mockery;
use Psr\Log\LoggerInterface;

class WithdrawNotificationServiceTest extends TestCase
{
    private WithdrawNotificationService $service;
    private LoggerInterface $mockLogger;

    protected function setUp(): void
    {
        parent::setUp();
        
        $this->mockLogger = Mockery::mock(LoggerInterface::class);
        $this->service = new WithdrawNotificationService($this->mockLogger);
    }

    protected function tearDown(): void
    {
        Mockery::close();
        parent::tearDown();
    }

    public function testScheduleEmailNotificationForEmailPix(): void
    {
        // Arrange
        $withdrawId = 'withdraw-123';
        $pixData = new PixData(
            type: PixKeyTypeEnum::EMAIL,
            key: 'test@example.com'
        );
        $withdrawRequestData = new WithdrawRequestData(
            accountId: 'account-123',
            method: WithdrawMethodEnum::PIX,
            amount: 100.0,
            pix: $pixData
        );

        $this->mockLogger
            ->shouldReceive('info')
            ->once()
            ->with('Job de notificação de email agendado', Mockery::type('array'));

        // Act
        $result = $this->service->scheduleEmailNotification($withdrawId, $withdrawRequestData);

        // Assert - For now just check it doesn't throw exception
        $this->assertTrue(true);
    }

    public function testScheduleEmailNotificationForNonEmailPix(): void
    {
        // Arrange - Como só existe EMAIL no enum, testamos sem PIX data
        $withdrawId = 'withdraw-123';
        $withdrawRequestData = new WithdrawRequestData(
            accountId: 'account-123',
            method: WithdrawMethodEnum::PIX,
            amount: 100.0,
            pix: null
        );

        $this->mockLogger
            ->shouldReceive('info')
            ->once()
            ->with('Email não enviado - chave PIX não é email', Mockery::type('array'));

        // Act
        $result = $this->service->scheduleEmailNotification($withdrawId, $withdrawRequestData);

        // Assert
        $this->assertTrue($result); // Should return true even when not sending
    }

    public function testConstructorWithLogger(): void
    {
        // Test that constructor can work with dependency injection
        $service = new WithdrawNotificationService($this->mockLogger);
        
        $this->assertInstanceOf(WithdrawNotificationService::class, $service);
    }

    public function testConstructorWithoutLogger(): void
    {
        // Test that constructor can work without explicit logger
        $service = new WithdrawNotificationService();
        
        $this->assertInstanceOf(WithdrawNotificationService::class, $service);
    }
}
