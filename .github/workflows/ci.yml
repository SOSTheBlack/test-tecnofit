name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: tecnofit_pix_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: swoole, redis, pdo_mysql, bcmath, gd
        tools: composer:v2
        coverage: xdebug

    - name: Copy environment file
      run: cp .env.ci .env

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: Verify CI Environment
      run: |
        echo "PHP Version: $(php -v | head -1)"
        echo "Composer Version: $(composer --version)"
        echo "Working Directory: $(pwd)"
        echo "Contents of composer.json scripts:"
        cat composer.json | grep -A 10 '"scripts"' || echo "No scripts section found"

    - name: Verify PHP CS Fixer installation
      run: |
        if [ ! -f "./vendor/bin/php-cs-fixer" ]; then
          echo "❌ PHP CS Fixer not found in vendor/bin/"
          echo "Contents of vendor/bin/:"
          ls -la vendor/bin/ || echo "vendor/bin/ does not exist"
          exit 1
        fi
        echo "✅ PHP CS Fixer found"
        ./vendor/bin/php-cs-fixer --version

    - name: Run PHP CS Fixer
      run: |
        rm -f .php-cs-fixer.cache
        composer dumpautoload
        composer cs-check

    - name: Run PHPStan analysis
      run: composer analyse

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P3306 -uroot -proot --silent; do
          echo 'Waiting for MySQL...'
          sleep 1
        done

    - name: Test database connection
      run: ./scripts/test-db-connection.sh
      env:
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: tecnofit_pix_test
        DB_USERNAME: root
        DB_PASSWORD: root

    - name: Test application configuration
      run: php scripts/test-config.php
      env:
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: tecnofit_pix_test
        DB_USERNAME: root
        DB_PASSWORD: root

    - name: Run database migrations
      run: php bin/hyperf.php migrate
      env:
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: tecnofit_pix_test
        DB_USERNAME: root
        DB_PASSWORD: root

    - name: Verify database tables
      run: |
        php -r "
        \$pdo = new PDO('mysql:host=127.0.0.1;port=3306;dbname=tecnofit_pix_test', 'root', 'root');
        \$result = \$pdo->query('SHOW TABLES')->fetchAll(PDO::FETCH_COLUMN);
        echo 'Tables in database: ' . implode(', ', \$result) . PHP_EOL;
        "
      env:
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: tecnofit_pix_test
        DB_USERNAME: root
        DB_PASSWORD: root

    - name: Run tests with coverage
      run: composer test-coverage
      env:
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: tecnofit_pix_test
        DB_USERNAME: root
        DB_PASSWORD: root
        REDIS_HOST: 127.0.0.1
        REDIS_PORT: 6379

    # === COVERAGE ANALYSIS ===
    # Upload para Codecov é opcional para evitar rate limits
    # Relatórios sempre disponíveis via GitHub Artifacts
    
    - name: Check if coverage file exists
      id: coverage-file
      run: |
        if [ -f "./runtime/coverage/clover.xml" ]; then
          echo "Coverage file exists"
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "File size: $(ls -lh ./runtime/coverage/clover.xml | awk '{print $5}')"
        else
          echo "Coverage file not found"
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Show coverage summary
      if: steps.coverage-file.outputs.exists == 'true'
      run: |
        echo "📊 **COVERAGE ANALYSIS**"
        echo "----------------------------------------"
        php scripts/extract-coverage.php ./runtime/coverage/clover.xml
        echo "----------------------------------------"
        echo "💡 Detailed HTML report available in artifacts"

    - name: Upload coverage reports (optional)
      if: |
        steps.coverage-file.outputs.exists == 'true' &&
        (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
        (github.event_name == 'pull_request')
      uses: codecov/codecov-action@v4
      with:
        files: ./runtime/coverage/clover.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: false
        disable_search: true
      continue-on-error: true

    - name: Upload coverage artifacts
      if: steps.coverage-file.outputs.exists == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          ./runtime/coverage/clover.xml
          ./runtime/coverage/html/
        retention-days: 30
      continue-on-error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: docker build -t tecnofit-pix-api .
    
    - name: Test Docker container
      run: |
        docker-compose up -d
        sleep 30
        docker-compose exec -T hyperf php bin/hyperf.php server:info
        docker-compose down
